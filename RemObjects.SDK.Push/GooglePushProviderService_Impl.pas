//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Runtime Version: 4.0.30319.17929
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

{$HIDE H7}
{$HIDE W1}
{$HIDE W27}
{$HIDE H11}

namespace RemObjects.SDK.Push;

interface

uses
  System,
  System.IO,
  RemObjects.SDK,
  RemObjects.SDK.Types,
  RemObjects.SDK.Server,
  RemObjects.SDK.Server.ClassFactories;
  
type
  [RemObjects.SDK.Server.ClassFactories.StandardClassFactory]
  [RemObjects.SDK.Server.Service(Name := 'GooglePushProviderService', InvokerClass := typeOf(GooglePushProviderService_Invoker), ActivatorClass := typeOf(GooglePushProviderService_Activator))]
  GooglePushProviderService = public class(RemObjects.SDK.Server.Service, IGooglePushProviderService)
  private 
    method InitializeComponent;
    var components: System.ComponentModel.Container := nil;
    
    method Log(aMessage: String);
  protected 
    method Dispose(aDisposing: System.Boolean); override;
  public 
    constructor;
    method registerDevice(registrationId: System.String; additionalInfo: System.String); virtual;
    method unregisterDevice(registrationId: System.String); virtual;
  end;
  
implementation

{ GooglePushProviderService }

constructor GooglePushProviderService;
begin
  inherited constructor();
  self.InitializeComponent();
  self.RequireSession := PushManager.Instance.RequireSession;
end;

method GooglePushProviderService.InitializeComponent;
begin
end;

method GooglePushProviderService.Dispose(aDisposing: System.Boolean);
begin
  if aDisposing then begin
    if (self.components <> nil) then begin
      self.components.Dispose();
    end;
  end;
  inherited Dispose(aDisposing);
end;

method GooglePushProviderService.Log(aMessage: String);
begin
  File.AppendAllText(Path.ChangeExtension(typeOf(self).Assembly.Location, '.log'), DateTime.Now.ToString('yyyy-MM-dd HH:mm:ss')+' '+aMessage+#13#10);
end;

method GooglePushProviderService.registerDevice(registrationId: System.String; additionalInfo: System.String);
var lPush := RemObjects.SDK.Push.PushManager.Instance;
begin
  try
    Log('Push(GCM) registration for '+ registrationId);
    var lDevice: PushDeviceInfo;
    if lPush.DeviceManager.TryGetDevice(registrationId, out lDevice) then begin
      Log('Push(GCM) registration updated for '+ registrationId);

      lDevice.ClientInfo := additionalInfo;
      lDevice.LastSeen := DateTime.Now;
      lPush.Flush;
      lPush.DeviceRegistered(self, new DeviceEventArgs(DeviceToken := registrationId, Mode := DeviceEventArgs.EventMode.EntryUpdated));
    end
    else begin
      Log('Push(GCM) registration new for '+ registrationId);
      var p := new GooglePushDeviceInfo(RegistrationID := registrationId,
                                       UserReference := iif(HasSession, Session['UserID']:ToString, nil),
                                       ClientInfo := additionalInfo, 
                                       ServerInfo := nil,
                                       LastSeen := DateTime.Now);
      lPush.DeviceManager.AddDevice(registrationId, p);
      lPush.Flush;
      lPush.DeviceRegistered(self, new DeviceEventArgs(DeviceToken := registrationId, Mode := DeviceEventArgs.EventMode.Registered));
    end;
  except
    on E:Exception do begin
      Log(E.Message);
      Log(E.StackTrace);
    end;
  end;
end;

method GooglePushProviderService.unregisterDevice(registrationId: System.String);
var lPush := PushManager.Instance;
begin
  if (lPush.DeviceManager.RemoveDevice(registrationId)) then begin
    lPush.Flush;
    lPush.DeviceUnregistered(self, new DeviceEventArgs(DeviceToken := registrationId, Mode := DeviceEventArgs.EventMode.Unregistered));
  end;
end;

end.
